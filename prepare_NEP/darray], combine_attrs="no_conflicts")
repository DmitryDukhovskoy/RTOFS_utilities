[0;31mSignature:[0m
[0mxr[0m[0;34m.[0m[0mmerge[0m[0;34m([0m[0;34m[0m
[0;34m[0m    [0mobjects[0m[0;34m:[0m [0;34m'Iterable[DataArray | CoercibleMapping]'[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mcompat[0m[0;34m:[0m [0;34m'CompatOptions'[0m [0;34m=[0m [0;34m'no_conflicts'[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mjoin[0m[0;34m:[0m [0;34m'JoinOptions'[0m [0;34m=[0m [0;34m'outer'[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mfill_value[0m[0;34m:[0m [0;34m'object'[0m [0;34m=[0m [0;34m<[0m[0mNA[0m[0;34m>[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mcombine_attrs[0m[0;34m:[0m [0;34m'CombineAttrsOptions'[0m [0;34m=[0m [0;34m'override'[0m[0;34m,[0m[0;34m[0m
[0;34m[0m[0;34m)[0m [0;34m->[0m [0;34m'Dataset'[0m[0;34m[0m[0;34m[0m[0m
[0;31mSource:[0m   
[0;32mdef[0m [0mmerge[0m[0;34m([0m[0;34m[0m
[0;34m[0m    [0mobjects[0m[0;34m:[0m [0mIterable[0m[0;34m[[0m[0mDataArray[0m [0;34m|[0m [0mCoercibleMapping[0m[0;34m][0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mcompat[0m[0;34m:[0m [0mCompatOptions[0m [0;34m=[0m [0;34m"no_conflicts"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mjoin[0m[0;34m:[0m [0mJoinOptions[0m [0;34m=[0m [0;34m"outer"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mfill_value[0m[0;34m:[0m [0mobject[0m [0;34m=[0m [0mdtypes[0m[0;34m.[0m[0mNA[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mcombine_attrs[0m[0;34m:[0m [0mCombineAttrsOptions[0m [0;34m=[0m [0;34m"override"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m[0;34m)[0m [0;34m->[0m [0mDataset[0m[0;34m:[0m[0;34m[0m
[0;34m[0m    [0;34m"""Merge any number of xarray objects into a single Dataset as variables.[0m
[0;34m[0m
[0;34m    Parameters[0m
[0;34m    ----------[0m
[0;34m    objects : iterable of Dataset or iterable of DataArray or iterable of dict-like[0m
[0;34m        Merge together all variables from these objects. If any of them are[0m
[0;34m        DataArray objects, they must have a name.[0m
[0;34m    compat : {"identical", "equals", "broadcast_equals", "no_conflicts", \[0m
[0;34m              "override", "minimal"}, default: "no_conflicts"[0m
[0;34m        String indicating how to compare variables of the same name for[0m
[0;34m        potential conflicts:[0m
[0;34m[0m
[0;34m        - "identical": all values, dimensions and attributes must be the[0m
[0;34m          same.[0m
[0;34m        - "equals": all values and dimensions must be the same.[0m
[0;34m        - "broadcast_equals": all values must be equal when variables are[0m
[0;34m          broadcast against each other to ensure common dimensions.[0m
[0;34m        - "no_conflicts": only values which are not null in both datasets[0m
[0;34m          must be equal. The returned dataset then contains the combination[0m
[0;34m          of all non-null values.[0m
[0;34m        - "override": skip comparing and pick variable from first dataset[0m
[0;34m        - "minimal": drop conflicting coordinates[0m
[0;34m[0m
[0;34m    join : {"outer", "inner", "left", "right", "exact", "override"}, default: "outer"[0m
[0;34m        String indicating how to combine differing indexes in objects.[0m
[0;34m[0m
[0;34m        - "outer": use the union of object indexes[0m
[0;34m        - "inner": use the intersection of object indexes[0m
[0;34m        - "left": use indexes from the first object with each dimension[0m
[0;34m        - "right": use indexes from the last object with each dimension[0m
[0;34m        - "exact": instead of aligning, raise `ValueError` when indexes to be[0m
[0;34m          aligned are not equal[0m
[0;34m        - "override": if indexes are of same size, rewrite indexes to be[0m
[0;34m          those of the first object with that dimension. Indexes for the same[0m
[0;34m          dimension must have the same size in all objects.[0m
[0;34m[0m
[0;34m    fill_value : scalar or dict-like, optional[0m
[0;34m        Value to use for newly missing values. If a dict-like, maps[0m
[0;34m        variable names to fill values. Use a data array's name to[0m
[0;34m        refer to its values.[0m
[0;34m    combine_attrs : {"drop", "identical", "no_conflicts", "drop_conflicts", \[0m
[0;34m                     "override"} or callable, default: "override"[0m
[0;34m        A callable or a string indicating how to combine attrs of the objects being[0m
[0;34m        merged:[0m
[0;34m[0m
[0;34m        - "drop": empty attrs on returned Dataset.[0m
[0;34m        - "identical": all attrs must be the same on every object.[0m
[0;34m        - "no_conflicts": attrs from all objects are combined, any that have[0m
[0;34m          the same name must also have the same value.[0m
[0;34m        - "drop_conflicts": attrs from all objects are combined, any that have[0m
[0;34m          the same name but different values are dropped.[0m
[0;34m        - "override": skip comparing and copy attrs from the first dataset to[0m
[0;34m          the result.[0m
[0;34m[0m
[0;34m        If a callable, it must expect a sequence of ``attrs`` dicts and a context object[0m
[0;34m        as its only parameters.[0m
[0;34m[0m
[0;34m    Returns[0m
[0;34m    -------[0m
[0;34m    Dataset[0m
[0;34m        Dataset with combined variables from each object.[0m
[0;34m[0m
[0;34m    Examples[0m
[0;34m    --------[0m
[0;34m    >>> x = xr.DataArray([0m
[0;34m    ...     [[1.0, 2.0], [3.0, 5.0]],[0m
[0;34m    ...     dims=("lat", "lon"),[0m
[0;34m    ...     coords={"lat": [35.0, 40.0], "lon": [100.0, 120.0]},[0m
[0;34m    ...     name="var1",[0m
[0;34m    ... )[0m
[0;34m    >>> y = xr.DataArray([0m
[0;34m    ...     [[5.0, 6.0], [7.0, 8.0]],[0m
[0;34m    ...     dims=("lat", "lon"),[0m
[0;34m    ...     coords={"lat": [35.0, 42.0], "lon": [100.0, 150.0]},[0m
[0;34m    ...     name="var2",[0m
[0;34m    ... )[0m
[0;34m    >>> z = xr.DataArray([0m
[0;34m    ...     [[0.0, 3.0], [4.0, 9.0]],[0m
[0;34m    ...     dims=("time", "lon"),[0m
[0;34m    ...     coords={"time": [30.0, 60.0], "lon": [100.0, 150.0]},[0m
[0;34m    ...     name="var3",[0m
[0;34m    ... )[0m
[0;34m[0m
[0;34m    >>> x[0m
[0;34m    <xarray.DataArray 'var1' (lat: 2, lon: 2)> Size: 32B[0m
[0;34m    array([[1., 2.],[0m
[0;34m           [3., 5.]])[0m
[0;34m    Coordinates:[0m
[0;34m      * lat      (lat) float64 16B 35.0 40.0[0m
[0;34m      * lon      (lon) float64 16B 100.0 120.0[0m
[0;34m[0m
[0;34m    >>> y[0m
[0;34m    <xarray.DataArray 'var2' (lat: 2, lon: 2)> Size: 32B[0m
[0;34m    array([[5., 6.],[0m
[0;34m           [7., 8.]])[0m
[0;34m    Coordinates:[0m
[0;34m      * lat      (lat) float64 16B 35.0 42.0[0m
[0;34m      * lon      (lon) float64 16B 100.0 150.0[0m
[0;34m[0m
[0;34m    >>> z[0m
[0;34m    <xarray.DataArray 'var3' (time: 2, lon: 2)> Size: 32B[0m
[0;34m    array([[0., 3.],[0m
[0;34m           [4., 9.]])[0m
[0;34m    Coordinates:[0m
[0;34m      * time     (time) float64 16B 30.0 60.0[0m
[0;34m      * lon      (lon) float64 16B 100.0 150.0[0m
[0;34m[0m
[0;34m    >>> xr.merge([x, y, z])[0m
[0;34m    <xarray.Dataset> Size: 256B[0m
[0;34m    Dimensions:  (lat: 3, lon: 3, time: 2)[0m
[0;34m    Coordinates:[0m
[0;34m      * lat      (lat) float64 24B 35.0 40.0 42.0[0m
[0;34m      * lon      (lon) float64 24B 100.0 120.0 150.0[0m
[0;34m      * time     (time) float64 16B 30.0 60.0[0m
[0;34m    Data variables:[0m
[0;34m        var1     (lat, lon) float64 72B 1.0 2.0 nan 3.0 5.0 nan nan nan nan[0m
[0;34m        var2     (lat, lon) float64 72B 5.0 nan 6.0 nan nan nan 7.0 nan 8.0[0m
[0;34m        var3     (time, lon) float64 48B 0.0 nan 3.0 4.0 nan 9.0[0m
[0;34m[0m
[0;34m    >>> xr.merge([x, y, z], compat="identical")[0m
[0;34m    <xarray.Dataset> Size: 256B[0m
[0;34m    Dimensions:  (lat: 3, lon: 3, time: 2)[0m
[0;34m    Coordinates:[0m
[0;34m      * lat      (lat) float64 24B 35.0 40.0 42.0[0m
[0;34m      * lon      (lon) float64 24B 100.0 120.0 150.0[0m
[0;34m      * time     (time) float64 16B 30.0 60.0[0m
[0;34m    Data variables:[0m
[0;34m        var1     (lat, lon) float64 72B 1.0 2.0 nan 3.0 5.0 nan nan nan nan[0m
[0;34m        var2     (lat, lon) float64 72B 5.0 nan 6.0 nan nan nan 7.0 nan 8.0[0m
[0;34m        var3     (time, lon) float64 48B 0.0 nan 3.0 4.0 nan 9.0[0m
[0;34m[0m
[0;34m    >>> xr.merge([x, y, z], compat="equals")[0m
[0;34m    <xarray.Dataset> Size: 256B[0m
[0;34m    Dimensions:  (lat: 3, lon: 3, time: 2)[0m
[0;34m    Coordinates:[0m
[0;34m      * lat      (lat) float64 24B 35.0 40.0 42.0[0m
[0;34m      * lon      (lon) float64 24B 100.0 120.0 150.0[0m
[0;34m      * time     (time) float64 16B 30.0 60.0[0m
[0;34m    Data variables:[0m
[0;34m        var1     (lat, lon) float64 72B 1.0 2.0 nan 3.0 5.0 nan nan nan nan[0m
[0;34m        var2     (lat, lon) float64 72B 5.0 nan 6.0 nan nan nan 7.0 nan 8.0[0m
[0;34m        var3     (time, lon) float64 48B 0.0 nan 3.0 4.0 nan 9.0[0m
[0;34m[0m
[0;34m    >>> xr.merge([x, y, z], compat="equals", fill_value=-999.0)[0m
[0;34m    <xarray.Dataset> Size: 256B[0m
[0;34m    Dimensions:  (lat: 3, lon: 3, time: 2)[0m
[0;34m    Coordinates:[0m
[0;34m      * lat      (lat) float64 24B 35.0 40.0 42.0[0m
[0;34m      * lon      (lon) float64 24B 100.0 120.0 150.0[0m
[0;34m      * time     (time) float64 16B 30.0 60.0[0m
[0;34m    Data variables:[0m
[0;34m        var1     (lat, lon) float64 72B 1.0 2.0 -999.0 3.0 ... -999.0 -999.0 -999.0[0m
[0;34m        var2     (lat, lon) float64 72B 5.0 -999.0 6.0 -999.0 ... 7.0 -999.0 8.0[0m
[0;34m        var3     (time, lon) float64 48B 0.0 -999.0 3.0 4.0 -999.0 9.0[0m
[0;34m[0m
[0;34m    >>> xr.merge([x, y, z], join="override")[0m
[0;34m    <xarray.Dataset> Size: 144B[0m
[0;34m    Dimensions:  (lat: 2, lon: 2, time: 2)[0m
[0;34m    Coordinates:[0m
[0;34m      * lat      (lat) float64 16B 35.0 40.0[0m
[0;34m      * lon      (lon) float64 16B 100.0 120.0[0m
[0;34m      * time     (time) float64 16B 30.0 60.0[0m
[0;34m    Data variables:[0m
[0;34m        var1     (lat, lon) float64 32B 1.0 2.0 3.0 5.0[0m
[0;34m        var2     (lat, lon) float64 32B 5.0 6.0 7.0 8.0[0m
[0;34m        var3     (time, lon) float64 32B 0.0 3.0 4.0 9.0[0m
[0;34m[0m
[0;34m    >>> xr.merge([x, y, z], join="inner")[0m
[0;34m    <xarray.Dataset> Size: 64B[0m
[0;34m    Dimensions:  (lat: 1, lon: 1, time: 2)[0m
[0;34m    Coordinates:[0m
[0;34m      * lat      (lat) float64 8B 35.0[0m
[0;34m      * lon      (lon) float64 8B 100.0[0m
[0;34m      * time     (time) float64 16B 30.0 60.0[0m
[0;34m    Data variables:[0m
[0;34m        var1     (lat, lon) float64 8B 1.0[0m
[0;34m        var2     (lat, lon) float64 8B 5.0[0m
[0;34m        var3     (time, lon) float64 16B 0.0 4.0[0m
[0;34m[0m
[0;34m    >>> xr.merge([x, y, z], compat="identical", join="inner")[0m
[0;34m    <xarray.Dataset> Size: 64B[0m
[0;34m    Dimensions:  (lat: 1, lon: 1, time: 2)[0m
[0;34m    Coordinates:[0m
[0;34m      * lat      (lat) float64 8B 35.0[0m
[0;34m      * lon      (lon) float64 8B 100.0[0m
[0;34m      * time     (time) float64 16B 30.0 60.0[0m
[0;34m    Data variables:[0m
[0;34m        var1     (lat, lon) float64 8B 1.0[0m
[0;34m        var2     (lat, lon) float64 8B 5.0[0m
[0;34m        var3     (time, lon) float64 16B 0.0 4.0[0m
[0;34m[0m
[0;34m    >>> xr.merge([x, y, z], compat="broadcast_equals", join="outer")[0m
[0;34m    <xarray.Dataset> Size: 256B[0m
[0;34m    Dimensions:  (lat: 3, lon: 3, time: 2)[0m
[0;34m    Coordinates:[0m
[0;34m      * lat      (lat) float64 24B 35.0 40.0 42.0[0m
[0;34m      * lon      (lon) float64 24B 100.0 120.0 150.0[0m
[0;34m      * time     (time) float64 16B 30.0 60.0[0m
[0;34m    Data variables:[0m
[0;34m        var1     (lat, lon) float64 72B 1.0 2.0 nan 3.0 5.0 nan nan nan nan[0m
[0;34m        var2     (lat, lon) float64 72B 5.0 nan 6.0 nan nan nan 7.0 nan 8.0[0m
[0;34m        var3     (time, lon) float64 48B 0.0 nan 3.0 4.0 nan 9.0[0m
[0;34m[0m
[0;34m    >>> xr.merge([x, y, z], join="exact")[0m
[0;34m    Traceback (most recent call last):[0m
[0;34m    ...[0m
[0;34m    ValueError: cannot align objects with join='exact' where ...[0m
[0;34m[0m
[0;34m    Raises[0m
[0;34m    ------[0m
[0;34m    xarray.MergeError[0m
[0;34m        If any variables with the same name have conflicting values.[0m
[0;34m[0m
[0;34m    See also[0m
[0;34m    --------[0m
[0;34m    concat[0m
[0;34m    combine_nested[0m
[0;34m    combine_by_coords[0m
[0;34m    """[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0;32mfrom[0m [0mxarray[0m[0;34m.[0m[0mcore[0m[0;34m.[0m[0mcoordinates[0m [0;32mimport[0m [0mCoordinates[0m[0;34m[0m
[0;34m[0m    [0;32mfrom[0m [0mxarray[0m[0;34m.[0m[0mcore[0m[0;34m.[0m[0mdataarray[0m [0;32mimport[0m [0mDataArray[0m[0;34m[0m
[0;34m[0m    [0;32mfrom[0m [0mxarray[0m[0;34m.[0m[0mcore[0m[0;34m.[0m[0mdataset[0m [0;32mimport[0m [0mDataset[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0mdict_like_objects[0m [0;34m=[0m [0;34m[[0m[0;34m][0m[0;34m[0m
[0;34m[0m    [0;32mfor[0m [0mobj[0m [0;32min[0m [0mobjects[0m[0;34m:[0m[0;34m[0m
[0;34m[0m        [0;32mif[0m [0;32mnot[0m [0misinstance[0m[0;34m([0m[0mobj[0m[0;34m,[0m [0;34m([0m[0mDataArray[0m[0;34m,[0m [0mDataset[0m[0;34m,[0m [0mCoordinates[0m[0;34m,[0m [0mdict[0m[0;34m)[0m[0;34m)[0m[0;34m:[0m[0;34m[0m
[0;34m[0m            [0;32mraise[0m [0mTypeError[0m[0;34m([0m[0;34m[0m
[0;34m[0m                [0;34m"objects must be an iterable containing only "[0m[0;34m[0m
[0;34m[0m                [0;34m"Dataset(s), DataArray(s), and dictionaries."[0m[0;34m[0m
[0;34m[0m            [0;34m)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m        [0;32mif[0m [0misinstance[0m[0;34m([0m[0mobj[0m[0;34m,[0m [0mDataArray[0m[0;34m)[0m[0;34m:[0m[0;34m[0m
[0;34m[0m            [0mobj[0m [0;34m=[0m [0mobj[0m[0;34m.[0m[0mto_dataset[0m[0;34m([0m[0mpromote_attrs[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m
[0;34m[0m        [0;32melif[0m [0misinstance[0m[0;34m([0m[0mobj[0m[0;34m,[0m [0mCoordinates[0m[0;34m)[0m[0;34m:[0m[0;34m[0m
[0;34m[0m            [0mobj[0m [0;34m=[0m [0mobj[0m[0;34m.[0m[0mto_dataset[0m[0;34m([0m[0;34m)[0m[0;34m[0m
[0;34m[0m        [0mdict_like_objects[0m[0;34m.[0m[0mappend[0m[0;34m([0m[0mobj[0m[0;34m)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0mmerge_result[0m [0;34m=[0m [0mmerge_core[0m[0;34m([0m[0;34m[0m
[0;34m[0m        [0mdict_like_objects[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mcompat[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mjoin[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mcombine_attrs[0m[0;34m=[0m[0mcombine_attrs[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mfill_value[0m[0;34m=[0m[0mfill_value[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m)[0m[0;34m[0m
[0;34m[0m    [0;32mreturn[0m [0mDataset[0m[0;34m.[0m[0m_construct_direct[0m[0;34m([0m[0;34m**[0m[0mmerge_result[0m[0;34m.[0m[0m_asdict[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;31mFile:[0m      ~/miniconda3/envs/anls/lib/python3.12/site-packages/xarray/core/merge.py
[0;31mType:[0m      function